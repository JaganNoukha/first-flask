# .github/workflows/build-and-deploy-flask-app.yml
name: Build and Deploy Flask App to EC2 (Corrected)

on:
  push:
    branches:
      - main # This workflow runs when you push code to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest # The type of virtual machine GitHub Actions will use

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # This step gets your code from the GitHub repository onto the runner

    # Removed the 'Install dependencies (on GitHub Actions Runner)' step here.
    # While it's useful for running tests or linting on the runner, it's not strictly
    # necessary for the deployment itself, as dependencies are installed on EC2.

    - name: Transfer app files to EC2
      uses: appleboy/scp-action@v0.1.6 # Use SCP action to securely copy files from runner to EC2
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        # Source path on the GitHub Actions runner.
        # '.' refers to the root of your checked-out repository.
        source: "./"
        # Destination path on your EC2 instance.
        # Make sure this matches where your app should reside.
        target: "/home/${{ secrets.EC2_USERNAME }}/first-flask"
        # Exclude directories/files that shouldn't be copied to EC2
        exclude: ".git,venv,.github" # Excludes Git data, local virtual environment, and GitHub Actions workflow files
        overwrite: true # Overwrite existing files on the destination
        rm: true # Remove files at destination that are not in the source (equivalent to rsync's --delete)

    - name: Set up Python on EC2 and Deploy
      uses: appleboy/ssh-action@v0.1.10 # Now use SSH action to execute commands on EC2
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          # Define the target directory on your EC2 instance
          # This must match the 'target' from the scp-action
          TARGET_DIR="/home/${{ secrets.EC2_USERNAME }}/first-flask"

          # Create the target directory if it doesn't exist (scp-action might have already done this)
          echo "Ensuring target directory exists: $TARGET_DIR"
          mkdir -p "$TARGET_DIR"

          # Change to the application directory on EC2, where files were just copied
          echo "Changing to application directory: $TARGET_DIR"
          cd "$TARGET_DIR"

          # --- Virtual Environment Setup on EC2 ---
          # Create virtual environment if it doesn't exist within the deployed app directory
          if [ ! -d "venv" ]; then
            echo "Creating virtual environment..."
            python3 -m venv venv
          fi

          # Activate the virtual environment
          echo "Activating virtual environment..."
          source venv/bin/activate

          # Install any new or updated Python dependencies (critical after file transfer)
          echo "Installing/updating Python dependencies on EC2..."
          pip install -r requirements.txt

          # --- Production WSGI Server (Gunicorn) ---
          # Stop any existing Gunicorn process running this app
          echo "Stopping existing Gunicorn Flask app (if running)..."
          pkill -f 'gunicorn' || true # Use '|| true' to prevent script failure if no process is found

          # Start the Flask app using Gunicorn in the background
          # Assumes your Flask application instance is named 'app' in 'app.py' (app:app)
          # Binds to all interfaces (0.0.0.0) on port 5000.
          echo "Starting new Flask app with Gunicorn..."
          # Use the python interpreter from the active virtual environment
          nohup gunicorn --workers 4 --bind 0.0.0.0:5000 app:app > app.log 2>&1 &

          echo "Deployment complete! Check your EC2 public IP on port 5000."
