# .github/workflows/build-and-deploy-flask-app.yml
name: Build and Deploy Flask App to EC2

on:
  push:
    branches:
      - main # This workflow runs when you push code to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest # The type of virtual machine GitHub Actions will use

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # This step gets your code from the GitHub repository onto the runner

    - name: Set up Python
      uses: actions/setup-python@v5 # Installs Python on the virtual computer
      with:
        python-version: '3.9' # Or 3.10, 3.11, etc. - should match what's on EC2

    - name: Install dependencies (on GitHub Actions Runner)
      # This step installs dependencies on the GitHub Actions runner itself.
      # While not strictly necessary for deployment (as dependencies are installed on EC2),
      # it can be useful if you had build-time checks or tests.
      # For a direct deploy, the primary dependency installation happens on EC2.
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt # Installs Flask, Gunicorn, and any other dependencies

    - name: Deploy via SSH to EC2
      uses: appleboy/ssh-action@v0.1.10 # This action connects to your EC2 instance via SSH
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          # Define the target directory on your EC2 instance
          TARGET_DIR="/home/${{ secrets.EC2_USERNAME }}/first-flask" # Adjust if your username is not 'ubuntu' or directory is different

          # Create the target directory if it doesn't exist
          echo "Ensuring target directory exists: $TARGET_DIR"
          mkdir -p "$TARGET_DIR"

          # Synchronize files from the GitHub Actions runner to EC2
          # The entire checked-out repository content is available in the current working directory of the runner.
          echo "Synchronizing application files to EC2..."
          # Use rsync for efficient syncing; '-a' for archive mode, '--delete' to remove old files
          # IMPORTANT: The source path './' refers to the checked-out repository content
          rsync -avz --delete --exclude 'venv/' --exclude '.git/' ./ "$TARGET_DIR"/

          # Change to the application directory on EC2
          cd "$TARGET_DIR"

          # --- Virtual Environment Setup on EC2 ---
          # Create virtual environment if it doesn't exist within the deployed app directory
          if [ ! -d "venv" ]; then
            echo "Creating virtual environment..."
            python3 -m venv venv
          fi

          # Activate the virtual environment
          echo "Activating virtual environment..."
          source venv/bin/activate

          # Install any new or updated Python dependencies (important if requirements.txt changes)
          echo "Installing/updating Python dependencies on EC2..."
          pip install -r requirements.txt

          # --- Production WSGI Server (Gunicorn) ---
          # Stop any existing Gunicorn process running this app
          echo "Stopping existing Gunicorn Flask app (if running)..."
          pkill -f 'gunicorn' || true # Use '|| true' to prevent script failure if no process is found

          # Start the Flask app using Gunicorn in the background
          # Assumes your Flask application instance is named 'app' in 'app.py' (app:app)
          # Binds to all interfaces (0.0.0.0) on port 5000.
          echo "Starting new Flask app with Gunicorn..."
          # Use the python interpreter from the active virtual environment
          nohup gunicorn --workers 4 --bind 0.0.0.0:5000 app:app > app.log 2>&1 &

          echo "Deployment complete! Check your EC2 public IP on port 5000."
